const x=t=>{const n=Math.sqrt(t.reduce((o,s)=>o+s**2,0)),r=t.map(o=>o/n);return r instanceof Float32Array?r:new Float32Array(r)},d=(t=[],n=[])=>{if(t.length!==n.length&&t.length!==3)throw new Error("vec1 and vec2 must have the 3 length");return new Float32Array([t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]])},c=(t=[],n=[])=>{if(t.length!==n.length&&t.length!==3)throw new Error("vec1 and vec2 must have the 3 length");return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]},m=(t=[],n=[])=>new Float32Array([t[0]-n[0],t[1]-n[1],t[2]-n[2]]),p=(t,n,r,o,s,h,l,i,w)=>{const g=new Float32Array([t,n,r]),A=new Float32Array([o,s,h]),u=new Float32Array([l,i,w]),a=x(m(A,g)),e=x(d(u,a)),y=x(d(a,e)),F=m([0,0,0],g);return new Float32Array([e[0],y[0],a[0],0,e[1],y[1],a[1],0,e[2],y[2],a[2],0,c(e,F),c(y,F),c(a,F),1])},M=(t,n,r,o,s,h)=>{const l=n-o,i=t-r,w=h-s,g=-(n+o)/l,A=-(t+r)/i,u=-(h+s)/w;return new Float32Array([2/l,0,0,g,0,2/i,0,A,0,0,-2/w,u,0,0,0,1])};export{M as a,p as g};
